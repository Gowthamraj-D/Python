from heapq import heappush, heappop
class MedianFinder(object):
    """
    1. two heaps - one min, one max
    2. all numbers in min heap should be greater than the numbers in the max heap so that median can be obtained in constant time.
    3. Either sizes are equal or min heap size is greater by 1 (preferring min heap in this example over max heap)
    4. When adding nums, we maintain the above invariants.
    """


    def __init__(self):
        self.minHeap = []
        self.minHeapSize = 0
        self.maxHeap = []
        self.maxHeapSize = 0

    def addNum(self, num):
        """
        :type num: int
        :rtype: None
        """

        # Adding step
        if not self.minHeap and not self.maxHeap:
            # Add to min heap if one heap is empty (base case)
            heappush(self.minHeap, num)
            self.minHeapSize += 1
        else:
            if num <= self.minHeap[0]:
                # if number is in lower half, add to max heap
                heappush(self.maxHeap, -num)
                self.maxHeapSize += 1   
            else:
                # number is in upper half
                heappush(self.minHeap, num)
                self.minHeapSize += 1
        

        # Balancing step
        if self.minHeapSize > self.maxHeapSize + 1:
            heappush(self.maxHeap, -heappop(self.minHeap))
            self.maxHeapSize += 1
            self.minHeapSize -= 1
        elif self.maxHeapSize > self.minHeapSize:
            #  ^preferring to keep min heap size greater.
            heappush(self.minHeap, -heappop(self.maxHeap))
            self.maxHeapSize -=1
            self.minHeapSize +=1


    

    def findMedian(self):
        """
        :rtype: float
        """

        return (self.minHeap[0] - self.maxHeap[0])/2.0 if self.maxHeapSize == self.minHeapSize else self.minHeap[0]
       


        


# Your MedianFinder object will be instantiated and called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()
